A framework may include predefined classes and functions that can be used to process input, manqage haredware devices and interact with system softwqare.
The purpose of the framework is - 

We web framework is a framework that provides tools and libraries to build web applications.

MVC - Model View Controller
examples: express, django, laravel etc.

 Express.js
=========

fast unopinionated, minimalist web framework
supports: Fast and easy, routing, middleware, rest api.

Installations: 
 npm install express ----------------  4.8.1 (stable)
 npm i exprerss@5.0.0-alpha.8  ----  5.0.0-alpha.8 (latest)

Creating a local server using Express
==============================

import express from 'express'
const app = express();
const port = process.env.PORT || 4000

// Get Request to home page
app.get("/", (req, res)=>{
	res.send("This is home page")
})

// listening on port
app.listen(port, ()=>{
	log("Server start at http://localhost:"+port)
})

*404 PAGE NOT FOUND SETUP*
app.get("*", (req, res)=>{
	res.send("404 Not Found 🤷‍♂️")
})

*ALL REQUEST AT SINGLE ROUTE*
app.all("/sabkuch", (req, res)=>{
    // this route will accept all requests
   // GET, POST, DELETE, PUT, PATCH
})

*ROUTING IN DEPTH*
===============

?String Patterns?
app.get('/ab?cd', (req, res)=>{
	res.send("Get request on /acd and /abcd")
})

*Regular Expression Path*
app.get("/a/", (req, res)=>{
	res.send("get on both /a and /a/ routes")	
})
// localhost:300/a
// localhost:300/a/

*Multiple Callback Functions in Route*
app.get("/about", (req, res, next)=>{
	res.send("first callback")
	next()
}, (req, res)=>{
	res.send("second callback)
})
k
*An array Callback*
const aq = (req, res, next)=>{
	log('first array callback)
	next();
})
const aq2 = (req, res, next)=>{
	log('second array callback)
	next();
})
const aq3 = (req, res, next)=>{
	log('third array callback)
	next();
})

app.get("/demo", [aq, aq2, aq3])

*Combination of an Independaence array
===============================

app.get('/about', [a1, a2], (req, res)=>{
	log('this is third callback')
})

    Route Chaining
===============

app.route('/user').get((req, res)=>{
	res.send('' users get")
}).post((req, res)=>{
	res.send("user added")
}).delete((req, res)=>{
	res.send('user deleted')
})
// :     /user route will accept all three requests

All method
--=-=-=-=-=-=-=-
app.route('/user').all((req, res, next)=>{
	res.send("all data")
	next()
}).get((req, res)=>{
	log("logic for get requests")
}).post((req, res)=>{
	log("logic for post requests")
})

Get ID or parameters from URL/Request
==============================

app.get("/user/delete/:id", (req, res)=>{
	const id = req.params.id   	// req.params consists of parameters object
	res.send("user deleted with id no: ", id)
})

=-=-=-=-=-=-=- More params -=-=-=-=-=-=-=-=

(1)   app.get("/product/:category/:id", (req, res)=>{
	  const {category, id}  = req.params
	  res.send(`Product Category: ${category} and id: ${id}`)
})

2)	app.get("/product/order/:year/and/:month", (req, res)=>{
	const {year, month} = req.params
	res.send("year: "+year+" and Month: ", month)
	
	// URL: 	http:localhost:3000/product/order/2023/and/march
})

3) 	app.get("/train/:from-:to", (req, res)=>{
	const {from, to} = req.params
	res.send("Traveling from: ", from, " to ", to)

	// URL	http://locahost:3000/train/prayagraj-anandvihar
})

=-=-=-=-=-=-=-=- Routes with Regular Expressions/ Validation -=-=-=-=-=-=-=-=-=

:- Accept only 2 digit id requests
	app.get("/user/:id([0-9]){2}", (req, res)=>{
	res.send("user Id is ", req.params.id)

	// URL 	localhost:3000/id/20
	// The request url will accept only two digit ids
})

:- Logical OR in URL
	app.get("/:type(post|article)/:id", (req, res)=>{
	const { type, id } = req.params
	res.send("type: ", type, "and post ID: ",id)

	// localhost:3000/post/30
	// localhost:3000/article/32 
})

	Let's Start Controller Goiis 
=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=

Controllers are used to seperate the business logic from the other code. It is helpful for debugging 
and to wrtie optimal code. We create a new folder named controller and create controllers init.

Folder Structure After Cotroller:
	controller
		controller.js
	node_modules
	routes
		rutes.js
	index.js
	package.json

controller/controller.js:
----------------------------
	const studentController = (req, res)=>{
		res.send("seperate controller for student")
	}
	export default studentController;

route/routes.js
------------------
	import studentController from './controller/studentController.js'
	const router = express.Router()
	router.get("/", studentController)

	Views
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Views are used to seperate UI from rest of the code
It consists of UI documents such as html.

Folder structure after Views
	<%= previousFolderStructure %>
	views/
		index.html
			//html code







